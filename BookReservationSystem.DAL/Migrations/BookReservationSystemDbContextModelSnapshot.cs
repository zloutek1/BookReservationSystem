// <auto-generated />
using System;
using BookReservationSystem.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookReservationSystem.DAL.Migrations
{
    [DbContext(typeof(BookReservationSystemDbContext))]
    partial class BookReservationSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBooks", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorsId = new Guid("fa2fbd16-db26-4de3-8dd1-3ad31d5ff928"),
                            BooksId = new Guid("9d11f146-f6af-4220-8963-941375d72796")
                        },
                        new
                        {
                            AuthorsId = new Guid("47163982-b575-41cf-a58c-2811f8d03371"),
                            BooksId = new Guid("67b52446-1bd4-4e16-b415-7d8ec2a8f4dc")
                        },
                        new
                        {
                            AuthorsId = new Guid("b3adf8f8-d3e6-4150-8ee9-3348e0eb47cb"),
                            BooksId = new Guid("0227fd3b-628a-49d2-ab28-310865072fd8")
                        },
                        new
                        {
                            AuthorsId = new Guid("4dcd31c6-f7ee-45b7-be22-2810f0e01dbc"),
                            BooksId = new Guid("98bac83d-1254-43a1-a4db-d2a24566d930")
                        },
                        new
                        {
                            AuthorsId = new Guid("a85e21f4-a3f2-415a-98c2-7238430d6483"),
                            BooksId = new Guid("55c2988e-5365-46a7-bf35-04babe516ccb")
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("9d11f146-f6af-4220-8963-941375d72796"),
                            GenresId = new Guid("bfc4f4e4-2e43-437e-ab20-ba02e83f4a50")
                        },
                        new
                        {
                            BooksId = new Guid("67b52446-1bd4-4e16-b415-7d8ec2a8f4dc"),
                            GenresId = new Guid("be69de21-7115-4a6f-991a-e43dbd6e4178")
                        },
                        new
                        {
                            BooksId = new Guid("0227fd3b-628a-49d2-ab28-310865072fd8"),
                            GenresId = new Guid("0d5dde14-dccc-4525-92cd-285c2787de0a")
                        },
                        new
                        {
                            BooksId = new Guid("98bac83d-1254-43a1-a4db-d2a24566d930"),
                            GenresId = new Guid("0d5dde14-dccc-4525-92cd-285c2787de0a")
                        },
                        new
                        {
                            BooksId = new Guid("55c2988e-5365-46a7-bf35-04babe516ccb"),
                            GenresId = new Guid("f1013404-9a88-45b7-9c02-c70618897af7")
                        });
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublishers", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("9d11f146-f6af-4220-8963-941375d72796"),
                            PublishersId = new Guid("3ea4139d-f1c4-45ac-b8b1-343c786d1593")
                        },
                        new
                        {
                            BooksId = new Guid("67b52446-1bd4-4e16-b415-7d8ec2a8f4dc"),
                            PublishersId = new Guid("5f09769b-45b2-42a8-bc10-a67d7d77d849")
                        },
                        new
                        {
                            BooksId = new Guid("0227fd3b-628a-49d2-ab28-310865072fd8"),
                            PublishersId = new Guid("63329b85-bd29-4f91-b91e-537cc406f053")
                        },
                        new
                        {
                            BooksId = new Guid("98bac83d-1254-43a1-a4db-d2a24566d930"),
                            PublishersId = new Guid("145522ff-cdb0-45dd-b7df-e2fc81d85c0e")
                        },
                        new
                        {
                            BooksId = new Guid("55c2988e-5365-46a7-bf35-04babe516ccb"),
                            PublishersId = new Guid("63329b85-bd29-4f91-b91e-537cc406f053")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Street")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("453eb8df-b3f8-4116-a972-e531088a79fc"),
                            City = "Brno",
                            Country = "CZ",
                            PostalCode = " 60200",
                            Street = "Joštová",
                            StreetNumber = 6
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa2fbd16-db26-4de3-8dd1-3ad31d5ff928"),
                            Name = "Kerkeling Hape"
                        },
                        new
                        {
                            Id = new Guid("47163982-b575-41cf-a58c-2811f8d03371"),
                            Name = "Lars Kepler"
                        },
                        new
                        {
                            Id = new Guid("b3adf8f8-d3e6-4150-8ee9-3348e0eb47cb"),
                            Name = "Bram Stoker"
                        },
                        new
                        {
                            Id = new Guid("4dcd31c6-f7ee-45b7-be22-2810f0e01dbc"),
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = new Guid("a85e21f4-a3f2-415a-98c2-7238430d6483"),
                            Name = "John Tolkien"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<string>("CoverArtPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d11f146-f6af-4220-8963-941375d72796"),
                            Abstract = "Co kočky cítí? Znají humor? Na co myslí? Jak mám svou kočku rozmazlovat a komunikovat s ní? A jsou naši pokojoví tygři jasnovidci? Těmto a mnoha dalším zajímavým otázkám se obšírně věnuje laskavá, vtipná i poučná kniha od milovníka koček, který se svými kočičími mazlíčky prožil třináct let a za tu dobu se jim naučil hodně rozumět. Nabízí čtenářům pár užitečných výchovných rad, ale jak sám poznamenává, nakonec budou stejně k ničemu, protože kočky si vždycky změní páníčka k obrazu svému, nikoli naopak.",
                            AverageRating = 0f,
                            CoverArtPath = "~/book_covers/kockybookcover.jpg",
                            Isbn = 9788024282442L,
                            Name = "Moje kočky, cizí kočky a já"
                        },
                        new
                        {
                            Id = new Guid("67b52446-1bd4-4e16-b415-7d8ec2a8f4dc"),
                            Abstract = "Joona Linna se znovu ocitá v ohrožení života a zachránit ho může jedině Saga Bauerová.",
                            AverageRating = 0f,
                            CoverArtPath = "~/book_covers/pavouk.jpg",
                            Isbn = 9788027513765L,
                            Name = "Pavouk"
                        },
                        new
                        {
                            Id = new Guid("0227fd3b-628a-49d2-ab28-310865072fd8"),
                            Abstract = "",
                            AverageRating = 0f,
                            CoverArtPath = "~/book_covers/dracula.jpg",
                            Isbn = 9780141199337L,
                            Name = "Dracula"
                        },
                        new
                        {
                            Id = new Guid("98bac83d-1254-43a1-a4db-d2a24566d930"),
                            Abstract = "peepo",
                            AverageRating = 0f,
                            CoverArtPath = "~/book_covers/the-shining.jpg",
                            Isbn = 9788055138343L,
                            Name = "Shining"
                        },
                        new
                        {
                            Id = new Guid("55c2988e-5365-46a7-bf35-04babe516ccb"),
                            Abstract = "Toto je příběh o tom, kterak se Pytlík vydal za dobrodružstvím a shledal, že náhle dělá a říká naprosto neočekávané věci… Bilbo Pytlík je hobit, který se těší z pohodlnéh a skromného života a jen zřídkakdy putuje dále než do své spižírny ve Dně pytle. Jeho spokojené bytí je však narušeno, když se jednoho dne u jeho prahu objeví čaroděj Gandalf v doprovodu třinácti trpaslíků a vezmou ho s sebou na cestu \"tam a zase zpátky\". Mají v úmyslu uloupit poklad mocného Šmaka, velikého a velmi nebezpečného draka... ",
                            AverageRating = 0f,
                            CoverArtPath = "~/book_covers/hobbit.jpg",
                            Isbn = 9788025707418L,
                            Name = "Hobbit"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookQuantity", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("9d11f146-f6af-4220-8963-941375d72796"),
                            LibraryId = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("67b52446-1bd4-4e16-b415-7d8ec2a8f4dc"),
                            LibraryId = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("0227fd3b-628a-49d2-ab28-310865072fd8"),
                            LibraryId = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("98bac83d-1254-43a1-a4db-d2a24566d930"),
                            LibraryId = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("55c2988e-5365-46a7-bf35-04babe516ccb"),
                            LibraryId = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            Count = 0,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfc4f4e4-2e43-437e-ab20-ba02e83f4a50"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("be69de21-7115-4a6f-991a-e43dbd6e4178"),
                            Name = "Beletry"
                        },
                        new
                        {
                            Id = new Guid("0d5dde14-dccc-4525-92cd-285c2787de0a"),
                            Name = "Horor"
                        },
                        new
                        {
                            Id = new Guid("f1013404-9a88-45b7-9c02-c70618897af7"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("b0b71879-23e8-43dd-89a0-7af6d42b5cc8"),
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("0990dbf0-2684-4734-bc4c-c8daef8c309c"),
                            Name = "Comic"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Library", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            AddressId = new Guid("453eb8df-b3f8-4116-a972-e531088a79fc"),
                            Name = "Knihy Dobrovský"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Publisher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ea4139d-f1c4-45ac-b8b1-343c786d1593"),
                            Name = "EUROMEDIA GROUP, a.s."
                        },
                        new
                        {
                            Id = new Guid("5f09769b-45b2-42a8-bc10-a67d7d77d849"),
                            Name = "Host"
                        },
                        new
                        {
                            Id = new Guid("63329b85-bd29-4f91-b91e-537cc406f053"),
                            Name = "ARGO"
                        },
                        new
                        {
                            Id = new Guid("145522ff-cdb0-45dd-b7df-e2fc81d85c0e"),
                            Name = "Ikar"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Reservation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9bb8f10-cf66-4277-9d75-7930a6fac426"),
                            BookId = new Guid("9d11f146-f6af-4220-8963-941375d72796"),
                            CustomerId = new Guid("188deb04-0fa9-4df0-9ef6-6b7e2cb15af2"),
                            DueDate = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            LibraryId = new Guid("920710b4-30ea-43cc-9c86-cebe1b1a4022"),
                            ReservationDate = new DateTime(2022, 10, 1, 18, 40, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("226391f5-314f-4d06-a47b-077a7a477ca6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d63c9d3-8400-497f-921a-961123659d9e",
                            Email = "demo@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "demo",
                            LastName = "demo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO@GMAIL.COM",
                            NormalizedUserName = "DEMO",
                            PasswordHash = "AQAAAAEAACcQAAAAEI56EuIXWNrKlnYOdNxWJx+bnMJ0WWTjpo3Mn3P7HPBGV78AQjb9BJomuebALvEIqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57fa57e3-eaa0-4b54-baa1-97993777fc06",
                            TwoFactorEnabled = false,
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("8c0a847b-08c1-4622-b3ed-77c3dda3531a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "855a678b-4839-4d09-9e32-8007ec394e85",
                            Email = "wmonkman0@zdnet.com",
                            EmailConfirmed = false,
                            FirstName = "Westbrook",
                            LastName = "Monkman",
                            LockoutEnabled = false,
                            PasswordHash = "RLreUYnARxnE",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "monkman"
                        },
                        new
                        {
                            Id = new Guid("188deb04-0fa9-4df0-9ef6-6b7e2cb15af2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ab0f734-f8de-418a-9637-828b17984d3b",
                            Email = "mmaxworthy1@ning.com",
                            EmailConfirmed = false,
                            FirstName = "Madelene",
                            LastName = "Maxworthy",
                            LockoutEnabled = false,
                            PasswordHash = "bo09BbrTa",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maxworthy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a1da8ec-0873-416e-beef-ac93a3e695d1"),
                            ConcurrencyStamp = "28758a0d-e225-445a-b11c-e7eb74d708ba",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("9aea0ff7-68c1-4517-943a-fcdfd3204a90"),
                            ConcurrencyStamp = "f9c1382e-9817-4de1-836f-4c921fb69639",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("BookQuantities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Reservations")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("BookReservationSystem.DAL.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Navigation("BookQuantities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}

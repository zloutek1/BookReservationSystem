// <auto-generated />
using System;
using BookReservationSystem.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookReservationSystem.DAL.Migrations
{
    [DbContext(typeof(BookReservationSystemDbContext))]
    partial class BookReservationSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBooks", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorsId = new Guid("29259d08-7727-4db3-b14e-80c5d557c076"),
                            BooksId = new Guid("8b8e6385-623a-4a78-9ea3-bbe451fe281e")
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("8b8e6385-623a-4a78-9ea3-bbe451fe281e"),
                            GenresId = new Guid("c169b0e6-b219-4fc1-85f3-d426f34b12be")
                        });
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublishers", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("8b8e6385-623a-4a78-9ea3-bbe451fe281e"),
                            PublishersId = new Guid("1cbecd9e-1aab-41f8-a4bf-8f218e4aec27")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("092b5589-bc29-473e-8e64-92e2201f2e1a"),
                            City = "Brno",
                            Country = "CZ",
                            PostalCode = " 60200",
                            Street = "Joštová",
                            StreetNumber = 6
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29259d08-7727-4db3-b14e-80c5d557c076"),
                            Name = "Kerkeling Hape"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CoverArtUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b8e6385-623a-4a78-9ea3-bbe451fe281e"),
                            Abstract = "Co kočky cítí? Znají humor? Na co myslí? Jak mám svou kočku rozmazlovat a komunikovat s ní? A jsou naši pokojoví tygři jasnovidci? Těmto a mnoha dalším zajímavým otázkám se obšírně věnuje laskavá, vtipná i poučná kniha od milovníka koček, který se svými kočičími mazlíčky prožil třináct let a za tu dobu se jim naučil hodně rozumět. Nabízí čtenářům pár užitečných výchovných rad, ale jak sám poznamenává, nakonec budou stejně k ničemu, protože kočky si vždycky změní páníčka k obrazu svému, nikoli naopak.",
                            CoverArtUrl = "https://www.knihydobrovsky.cz/thumbs/book-detail-fancy-box/mod_eshop/produkty/m/moje-kocky-cizi-kocky-a-ja-9788024282442.jpg",
                            Isbn = 9788024282442L,
                            Name = "Moje kočky, cizí kočky a já"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookQuantity");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("8b8e6385-623a-4a78-9ea3-bbe451fe281e"),
                            LibraryId = new Guid("6062518f-14d1-45f8-af29-939bd60c9830"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c169b0e6-b219-4fc1-85f3-d426f34b12be"),
                            Name = "Satire"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Library");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6062518f-14d1-45f8-af29-939bd60c9830"),
                            AddressId = new Guid("092b5589-bc29-473e-8e64-92e2201f2e1a"),
                            Name = "Knihy Dobrovský"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cbecd9e-1aab-41f8-a4bf-8f218e4aec27"),
                            Name = "EUROMEDIA GROUP, a.s."
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d9c38a7-e48f-471f-a9f4-72046d3fd3f0"),
                            BookId = new Guid("8b8e6385-623a-4a78-9ea3-bbe451fe281e"),
                            CustomerId = new Guid("7faf4d6e-0848-41b6-ae27-5aaf690f6a43"),
                            DueDate = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            LibraryId = new Guid("6062518f-14d1-45f8-af29-939bd60c9830"),
                            ReservationDate = new DateTime(2022, 10, 1, 18, 40, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97e0e428-3ee3-465e-a594-cc5fe87e14a6"),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da67c6a7-b072-4655-bbfa-f53137383b89"),
                            Email = "wmonkman0@zdnet.com",
                            FirstName = "Westbrook",
                            LastName = "Monkman",
                            Password = "RLreUYnARxnE",
                            PasswordSalt = ""
                        },
                        new
                        {
                            Id = new Guid("7faf4d6e-0848-41b6-ae27-5aaf690f6a43"),
                            Email = "mmaxworthy1@ning.com",
                            FirstName = "Madelene",
                            LastName = "Maxworthy",
                            Password = "bo09BbrTa",
                            PasswordSalt = ""
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Reservations")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}

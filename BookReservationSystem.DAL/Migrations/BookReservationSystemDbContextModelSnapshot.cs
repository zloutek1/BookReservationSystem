// <auto-generated />
using System;
using BookReservationSystem.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookReservationSystem.DAL.Migrations
{
    [DbContext(typeof(BookReservationSystemDbContext))]
    partial class BookReservationSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBooks", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorsId = new Guid("85a2f316-bd30-4d69-b2d7-408db01444a9"),
                            BooksId = new Guid("4af06947-d197-4f1b-a23e-b2e661f4e212")
                        },
                        new
                        {
                            AuthorsId = new Guid("8cec3254-80a7-4845-bbb1-14e860eeade1"),
                            BooksId = new Guid("e3b0ca13-9e46-4745-966a-e686a8cfe1b0")
                        },
                        new
                        {
                            AuthorsId = new Guid("6cfa4cd0-11e2-42bc-991f-3cc2cf637fc2"),
                            BooksId = new Guid("971397be-d444-4c04-9fa0-96e105e7f75f")
                        },
                        new
                        {
                            AuthorsId = new Guid("799c7694-cf68-4858-91f5-d2691d197809"),
                            BooksId = new Guid("ffc13f78-81af-4bb1-b88c-ef4d5eabe6c2")
                        },
                        new
                        {
                            AuthorsId = new Guid("a45865a6-8808-435d-9954-b99049ba3816"),
                            BooksId = new Guid("9bd8ef8a-33f6-4003-8395-3122e42fb519")
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("4af06947-d197-4f1b-a23e-b2e661f4e212"),
                            GenresId = new Guid("3ddbed50-59b2-43ed-bcb6-a61f817d1c07")
                        },
                        new
                        {
                            BooksId = new Guid("e3b0ca13-9e46-4745-966a-e686a8cfe1b0"),
                            GenresId = new Guid("b46fbe19-ae1a-4dcf-9f4a-2e2ca63e1625")
                        },
                        new
                        {
                            BooksId = new Guid("971397be-d444-4c04-9fa0-96e105e7f75f"),
                            GenresId = new Guid("5bf88eed-f98e-459e-a443-15bf9f692a79")
                        },
                        new
                        {
                            BooksId = new Guid("ffc13f78-81af-4bb1-b88c-ef4d5eabe6c2"),
                            GenresId = new Guid("5bf88eed-f98e-459e-a443-15bf9f692a79")
                        },
                        new
                        {
                            BooksId = new Guid("9bd8ef8a-33f6-4003-8395-3122e42fb519"),
                            GenresId = new Guid("abdb1c5f-78c1-4426-9448-f1e7efd1d7ed")
                        });
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublishers", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("4af06947-d197-4f1b-a23e-b2e661f4e212"),
                            PublishersId = new Guid("fa77df0f-a5bb-4725-aa2e-b552242bfc61")
                        },
                        new
                        {
                            BooksId = new Guid("e3b0ca13-9e46-4745-966a-e686a8cfe1b0"),
                            PublishersId = new Guid("3e9ab122-453e-4ba4-8dd1-9462dfbaf591")
                        },
                        new
                        {
                            BooksId = new Guid("971397be-d444-4c04-9fa0-96e105e7f75f"),
                            PublishersId = new Guid("beeba881-7fd2-43b9-9987-188800166aab")
                        },
                        new
                        {
                            BooksId = new Guid("ffc13f78-81af-4bb1-b88c-ef4d5eabe6c2"),
                            PublishersId = new Guid("ca973918-90d8-4890-8496-22d6030de945")
                        },
                        new
                        {
                            BooksId = new Guid("9bd8ef8a-33f6-4003-8395-3122e42fb519"),
                            PublishersId = new Guid("beeba881-7fd2-43b9-9987-188800166aab")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Street")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9b6ea89-dd10-41a2-bc3f-bf71e112934b"),
                            City = "Brno",
                            Country = "CZ",
                            PostalCode = " 60200",
                            Street = "Joštová",
                            StreetNumber = 6
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85a2f316-bd30-4d69-b2d7-408db01444a9"),
                            Name = "Kerkeling Hape"
                        },
                        new
                        {
                            Id = new Guid("8cec3254-80a7-4845-bbb1-14e860eeade1"),
                            Name = "Lars Kepler"
                        },
                        new
                        {
                            Id = new Guid("6cfa4cd0-11e2-42bc-991f-3cc2cf637fc2"),
                            Name = "Bram Stoker"
                        },
                        new
                        {
                            Id = new Guid("799c7694-cf68-4858-91f5-d2691d197809"),
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = new Guid("a45865a6-8808-435d-9954-b99049ba3816"),
                            Name = "John Tolkien"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CoverArtPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4af06947-d197-4f1b-a23e-b2e661f4e212"),
                            Abstract = "Co kočky cítí? Znají humor? Na co myslí? Jak mám svou kočku rozmazlovat a komunikovat s ní? A jsou naši pokojoví tygři jasnovidci? Těmto a mnoha dalším zajímavým otázkám se obšírně věnuje laskavá, vtipná i poučná kniha od milovníka koček, který se svými kočičími mazlíčky prožil třináct let a za tu dobu se jim naučil hodně rozumět. Nabízí čtenářům pár užitečných výchovných rad, ale jak sám poznamenává, nakonec budou stejně k ničemu, protože kočky si vždycky změní páníčka k obrazu svému, nikoli naopak.",
                            CoverArtPath = "~/book_covers/kockybookcover.jpg",
                            Isbn = 9788024282442L,
                            Name = "Moje kočky, cizí kočky a já",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("e3b0ca13-9e46-4745-966a-e686a8cfe1b0"),
                            Abstract = "Joona Linna se znovu ocitá v ohrožení života a zachránit ho může jedině Saga Bauerová.",
                            CoverArtPath = "~/book_covers/pavouk.jpg",
                            Isbn = 9788027513765L,
                            Name = "Pavouk",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("971397be-d444-4c04-9fa0-96e105e7f75f"),
                            Abstract = "",
                            CoverArtPath = "~/book_covers/dracula.jpg",
                            Isbn = 9780141199337L,
                            Name = "Dracula",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("ffc13f78-81af-4bb1-b88c-ef4d5eabe6c2"),
                            Abstract = "peepo",
                            CoverArtPath = "~/book_covers/the-shining.jpg",
                            Isbn = 9788055138343L,
                            Name = "Shining",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("9bd8ef8a-33f6-4003-8395-3122e42fb519"),
                            Abstract = "Toto je příběh o tom, kterak se Pytlík vydal za dobrodružstvím a shledal, že náhle dělá a říká naprosto neočekávané věci… Bilbo Pytlík je hobit, který se těší z pohodlnéh a skromného života a jen zřídkakdy putuje dále než do své spižírny ve Dně pytle. Jeho spokojené bytí je však narušeno, když se jednoho dne u jeho prahu objeví čaroděj Gandalf v doprovodu třinácti trpaslíků a vezmou ho s sebou na cestu \"tam a zase zpátky\". Mají v úmyslu uloupit poklad mocného Šmaka, velikého a velmi nebezpečného draka... ",
                            CoverArtPath = "~/book_covers/hobbit.jpg",
                            Isbn = 9788025707418L,
                            Name = "Hobbit",
                            Rating = 0f
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookQuantity");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("4af06947-d197-4f1b-a23e-b2e661f4e212"),
                            LibraryId = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("e3b0ca13-9e46-4745-966a-e686a8cfe1b0"),
                            LibraryId = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("971397be-d444-4c04-9fa0-96e105e7f75f"),
                            LibraryId = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("ffc13f78-81af-4bb1-b88c-ef4d5eabe6c2"),
                            LibraryId = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("9bd8ef8a-33f6-4003-8395-3122e42fb519"),
                            LibraryId = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            Count = 0,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ddbed50-59b2-43ed-bcb6-a61f817d1c07"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("b46fbe19-ae1a-4dcf-9f4a-2e2ca63e1625"),
                            Name = "Beletry"
                        },
                        new
                        {
                            Id = new Guid("5bf88eed-f98e-459e-a443-15bf9f692a79"),
                            Name = "Horor"
                        },
                        new
                        {
                            Id = new Guid("abdb1c5f-78c1-4426-9448-f1e7efd1d7ed"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("a49ec5fe-d376-408d-a942-4e9fe129aa65"),
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("5587a2d2-d22f-4c20-a556-889229aa51af"),
                            Name = "Comic"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Library");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            AddressId = new Guid("d9b6ea89-dd10-41a2-bc3f-bf71e112934b"),
                            Name = "Knihy Dobrovský"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa77df0f-a5bb-4725-aa2e-b552242bfc61"),
                            Name = "EUROMEDIA GROUP, a.s."
                        },
                        new
                        {
                            Id = new Guid("3e9ab122-453e-4ba4-8dd1-9462dfbaf591"),
                            Name = "Host"
                        },
                        new
                        {
                            Id = new Guid("beeba881-7fd2-43b9-9987-188800166aab"),
                            Name = "ARGO"
                        },
                        new
                        {
                            Id = new Guid("ca973918-90d8-4890-8496-22d6030de945"),
                            Name = "Ikar"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e994f727-4e5b-4ccb-9cc3-f649e9e0893b"),
                            BookId = new Guid("4af06947-d197-4f1b-a23e-b2e661f4e212"),
                            CustomerId = new Guid("355016a2-b3ff-49cf-9adb-313f5b2cb9f7"),
                            DueDate = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            LibraryId = new Guid("ea09cd4c-a8eb-480a-9df9-b14d88e84d04"),
                            ReservationDate = new DateTime(2022, 10, 1, 18, 40, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8d0fdb6-95f1-4fce-8570-6ea6f06c91ab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5c65505-200f-4fc5-809c-8e174f2562f3",
                            Email = "demo@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "demo",
                            LastName = "demo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO@GMAIL.COM",
                            NormalizedUserName = "DEMO",
                            PasswordHash = "AQAAAAEAACcQAAAAEI56EuIXWNrKlnYOdNxWJx+bnMJ0WWTjpo3Mn3P7HPBGV78AQjb9BJomuebALvEIqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e248bd99-22c0-4b99-b980-ec9d1bc19c8d",
                            TwoFactorEnabled = false,
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("29aad8c0-309c-433d-be8a-5dc642821d38"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7c9fbe2-f7bc-4a6a-b621-1ac53239869b",
                            Email = "wmonkman0@zdnet.com",
                            EmailConfirmed = false,
                            FirstName = "Westbrook",
                            LastName = "Monkman",
                            LockoutEnabled = false,
                            PasswordHash = "RLreUYnARxnE",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "monkman"
                        },
                        new
                        {
                            Id = new Guid("355016a2-b3ff-49cf-9adb-313f5b2cb9f7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33cc1c19-46ac-4f61-8280-958824736011",
                            Email = "mmaxworthy1@ning.com",
                            EmailConfirmed = false,
                            FirstName = "Madelene",
                            LastName = "Maxworthy",
                            LockoutEnabled = false,
                            PasswordHash = "bo09BbrTa",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maxworthy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6332ae5-b39c-46f6-add4-94e18ebfdf91"),
                            ConcurrencyStamp = "8491ff56-8e9b-4b09-82c6-4b669076a4a4",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("ba55a223-88f2-4d77-96b7-b9036c4a6ad0"),
                            ConcurrencyStamp = "be01e308-827e-4988-9029-fd4cc6468a30",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("BookQuantities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Reservations")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("BookReservationSystem.DAL.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Navigation("BookQuantities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using BookReservationSystem.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookReservationSystem.DAL.Migrations
{
    [DbContext(typeof(BookReservationSystemDbContext))]
    [Migration("20221218164936_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBooks", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorsId = new Guid("356f9c16-1a57-4958-ab1c-c19ffd482a65"),
                            BooksId = new Guid("064c4555-721b-433e-97b0-54e048f88dbc")
                        },
                        new
                        {
                            AuthorsId = new Guid("51922d0a-8ada-44f9-8756-cb576c5d199f"),
                            BooksId = new Guid("2df8c950-d19a-421f-ac5f-2d92efa43ac5")
                        },
                        new
                        {
                            AuthorsId = new Guid("dcc7b4c7-1b26-41b6-ad64-f4bed4e0b319"),
                            BooksId = new Guid("f92eb26a-3e98-490b-b355-5eac69a3d407")
                        },
                        new
                        {
                            AuthorsId = new Guid("7bf6003e-38e2-4256-b62f-36357991c838"),
                            BooksId = new Guid("902ccd45-9784-4644-9031-a1403eebd1da")
                        },
                        new
                        {
                            AuthorsId = new Guid("f21f47ff-49dc-4dfe-ae3f-af5c3b799a23"),
                            BooksId = new Guid("578bb6f1-2358-4084-aadc-6b70af0a6ba4")
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("064c4555-721b-433e-97b0-54e048f88dbc"),
                            GenresId = new Guid("7100f309-d0d9-4319-b408-dedbbf0a5541")
                        },
                        new
                        {
                            BooksId = new Guid("2df8c950-d19a-421f-ac5f-2d92efa43ac5"),
                            GenresId = new Guid("576da5a8-3f25-48ed-bdf0-3c0f5210cc71")
                        },
                        new
                        {
                            BooksId = new Guid("f92eb26a-3e98-490b-b355-5eac69a3d407"),
                            GenresId = new Guid("5251e5bf-9d3f-4409-bc6f-59128cfd7a11")
                        },
                        new
                        {
                            BooksId = new Guid("902ccd45-9784-4644-9031-a1403eebd1da"),
                            GenresId = new Guid("5251e5bf-9d3f-4409-bc6f-59128cfd7a11")
                        },
                        new
                        {
                            BooksId = new Guid("578bb6f1-2358-4084-aadc-6b70af0a6ba4"),
                            GenresId = new Guid("0d633a91-6779-4d17-8d1a-fa377cde4fe6")
                        });
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublishers", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("064c4555-721b-433e-97b0-54e048f88dbc"),
                            PublishersId = new Guid("2abe5f05-e279-4914-b991-0fd9fe4e3bc4")
                        },
                        new
                        {
                            BooksId = new Guid("2df8c950-d19a-421f-ac5f-2d92efa43ac5"),
                            PublishersId = new Guid("900ed9bb-14d7-42a9-a9d8-9307f3e57877")
                        },
                        new
                        {
                            BooksId = new Guid("f92eb26a-3e98-490b-b355-5eac69a3d407"),
                            PublishersId = new Guid("7875c728-b9eb-4445-b89a-8aa7e7b1b3b4")
                        },
                        new
                        {
                            BooksId = new Guid("902ccd45-9784-4644-9031-a1403eebd1da"),
                            PublishersId = new Guid("567db8d6-a278-49da-b9b7-0890f64c9b36")
                        },
                        new
                        {
                            BooksId = new Guid("578bb6f1-2358-4084-aadc-6b70af0a6ba4"),
                            PublishersId = new Guid("7875c728-b9eb-4445-b89a-8aa7e7b1b3b4")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Street")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5eb0f010-11ec-4fad-a883-7a998356a18d"),
                            City = "Brno",
                            Country = "CZ",
                            PostalCode = " 60200",
                            Street = "Joštová",
                            StreetNumber = 6
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("356f9c16-1a57-4958-ab1c-c19ffd482a65"),
                            Name = "Kerkeling Hape"
                        },
                        new
                        {
                            Id = new Guid("51922d0a-8ada-44f9-8756-cb576c5d199f"),
                            Name = "Lars Kepler"
                        },
                        new
                        {
                            Id = new Guid("dcc7b4c7-1b26-41b6-ad64-f4bed4e0b319"),
                            Name = "Bram Stoker"
                        },
                        new
                        {
                            Id = new Guid("7bf6003e-38e2-4256-b62f-36357991c838"),
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = new Guid("f21f47ff-49dc-4dfe-ae3f-af5c3b799a23"),
                            Name = "John Tolkien"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CoverArtPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = new Guid("064c4555-721b-433e-97b0-54e048f88dbc"),
                            Abstract = "Co kočky cítí? Znají humor? Na co myslí? Jak mám svou kočku rozmazlovat a komunikovat s ní? A jsou naši pokojoví tygři jasnovidci? Těmto a mnoha dalším zajímavým otázkám se obšírně věnuje laskavá, vtipná i poučná kniha od milovníka koček, který se svými kočičími mazlíčky prožil třináct let a za tu dobu se jim naučil hodně rozumět. Nabízí čtenářům pár užitečných výchovných rad, ale jak sám poznamenává, nakonec budou stejně k ničemu, protože kočky si vždycky změní páníčka k obrazu svému, nikoli naopak.",
                            CoverArtPath = "~/book_covers/kockybookcover.jpg",
                            Isbn = 9788024282442L,
                            Name = "Moje kočky, cizí kočky a já",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("2df8c950-d19a-421f-ac5f-2d92efa43ac5"),
                            Abstract = "Joona Linna se znovu ocitá v ohrožení života a zachránit ho může jedině Saga Bauerová.",
                            CoverArtPath = "~/book_covers/pavouk.jpg",
                            Isbn = 9788027513765L,
                            Name = "Pavouk",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("f92eb26a-3e98-490b-b355-5eac69a3d407"),
                            Abstract = "",
                            CoverArtPath = "~/book_covers/dracula.jpg",
                            Isbn = 9780141199337L,
                            Name = "Dracula",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("902ccd45-9784-4644-9031-a1403eebd1da"),
                            Abstract = "peepo",
                            CoverArtPath = "~/book_covers/the-shining.jpg",
                            Isbn = 9788055138343L,
                            Name = "Shining",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("578bb6f1-2358-4084-aadc-6b70af0a6ba4"),
                            Abstract = "Toto je příběh o tom, kterak se Pytlík vydal za dobrodružstvím a shledal, že náhle dělá a říká naprosto neočekávané věci… Bilbo Pytlík je hobit, který se těší z pohodlnéh a skromného života a jen zřídkakdy putuje dále než do své spižírny ve Dně pytle. Jeho spokojené bytí je však narušeno, když se jednoho dne u jeho prahu objeví čaroděj Gandalf v doprovodu třinácti trpaslíků a vezmou ho s sebou na cestu \"tam a zase zpátky\". Mají v úmyslu uloupit poklad mocného Šmaka, velikého a velmi nebezpečného draka... ",
                            CoverArtPath = "~/book_covers/hobbit.jpg",
                            Isbn = 9788025707418L,
                            Name = "Hobbit",
                            Rating = 0f
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookQuantity");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("064c4555-721b-433e-97b0-54e048f88dbc"),
                            LibraryId = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("2df8c950-d19a-421f-ac5f-2d92efa43ac5"),
                            LibraryId = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("f92eb26a-3e98-490b-b355-5eac69a3d407"),
                            LibraryId = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("902ccd45-9784-4644-9031-a1403eebd1da"),
                            LibraryId = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("578bb6f1-2358-4084-aadc-6b70af0a6ba4"),
                            LibraryId = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            Count = 0,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7100f309-d0d9-4319-b408-dedbbf0a5541"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("576da5a8-3f25-48ed-bdf0-3c0f5210cc71"),
                            Name = "Beletry"
                        },
                        new
                        {
                            Id = new Guid("5251e5bf-9d3f-4409-bc6f-59128cfd7a11"),
                            Name = "Horor"
                        },
                        new
                        {
                            Id = new Guid("0d633a91-6779-4d17-8d1a-fa377cde4fe6"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("c438ad4a-aa61-4a73-b541-35fe13c4f6f3"),
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("12499ca3-4cc3-4fa3-8007-d5bd03524d3e"),
                            Name = "Comic"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Library");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            AddressId = new Guid("5eb0f010-11ec-4fad-a883-7a998356a18d"),
                            Name = "Knihy Dobrovský"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2abe5f05-e279-4914-b991-0fd9fe4e3bc4"),
                            Name = "EUROMEDIA GROUP, a.s."
                        },
                        new
                        {
                            Id = new Guid("900ed9bb-14d7-42a9-a9d8-9307f3e57877"),
                            Name = "Host"
                        },
                        new
                        {
                            Id = new Guid("7875c728-b9eb-4445-b89a-8aa7e7b1b3b4"),
                            Name = "ARGO"
                        },
                        new
                        {
                            Id = new Guid("567db8d6-a278-49da-b9b7-0890f64c9b36"),
                            Name = "Ikar"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5997489-e3f5-4157-9003-1c53971c43ab"),
                            BookId = new Guid("064c4555-721b-433e-97b0-54e048f88dbc"),
                            CustomerId = new Guid("4a82a356-363b-4757-bed8-45347a15cbc9"),
                            DueDate = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            LibraryId = new Guid("8c591b4c-2ecf-4596-a56e-07ec3accd979"),
                            ReservationDate = new DateTime(2022, 10, 1, 18, 40, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b17bca4-60bd-4a6c-af6b-fe23fbf92194"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "836b158c-189f-4051-b6f1-693bb5991283",
                            Email = "demo@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "demo",
                            LastName = "demo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO@GMAIL.COM",
                            NormalizedUserName = "DEMO",
                            PasswordHash = "AQAAAAEAACcQAAAAEI56EuIXWNrKlnYOdNxWJx+bnMJ0WWTjpo3Mn3P7HPBGV78AQjb9BJomuebALvEIqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98f74f71-efdd-4bed-99d3-d1b2dca96da2",
                            TwoFactorEnabled = false,
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("914fe78e-3210-4360-b478-8d8df581d414"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43b28490-a793-4df7-9ac4-dd39f1b0929e",
                            Email = "wmonkman0@zdnet.com",
                            EmailConfirmed = false,
                            FirstName = "Westbrook",
                            LastName = "Monkman",
                            LockoutEnabled = false,
                            PasswordHash = "RLreUYnARxnE",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "monkman"
                        },
                        new
                        {
                            Id = new Guid("4a82a356-363b-4757-bed8-45347a15cbc9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46ca9f49-854a-4063-a4a4-85989f4e2eec",
                            Email = "mmaxworthy1@ning.com",
                            EmailConfirmed = false,
                            FirstName = "Madelene",
                            LastName = "Maxworthy",
                            LockoutEnabled = false,
                            PasswordHash = "bo09BbrTa",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maxworthy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7afa6103-b034-4356-80b0-bd5754dfe654"),
                            ConcurrencyStamp = "656e800a-d2ae-4707-9790-50a631157dd2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("1fdde2a1-6bc6-48dc-af86-3b7d81d29cdb"),
                            ConcurrencyStamp = "e5cb5e2c-49a1-4945-b63c-6b70e77661ef",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("BookQuantities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Reservations")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("BookReservationSystem.DAL.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Navigation("BookQuantities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}

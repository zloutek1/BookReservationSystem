// <auto-generated />
using System;
using BookReservationSystem.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookReservationSystem.DAL.Migrations
{
    [DbContext(typeof(BookReservationSystemDbContext))]
    [Migration("20221217224337_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBooks", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorsId = new Guid("65da7131-03ea-4694-950b-02dbebf19315"),
                            BooksId = new Guid("8d4bd570-567b-418f-83b3-db5c8c3e584b")
                        },
                        new
                        {
                            AuthorsId = new Guid("050d99a9-6760-41ac-93cb-e67c4b798a4c"),
                            BooksId = new Guid("de9d095f-49ca-411d-8093-4ac8c22d568f")
                        },
                        new
                        {
                            AuthorsId = new Guid("88f9dc03-8aa7-475f-9d3b-de221768a27d"),
                            BooksId = new Guid("c7b2b1a0-417e-49b8-845e-aee1ecbcbc4d")
                        },
                        new
                        {
                            AuthorsId = new Guid("13394916-877f-4df9-ad6e-9b26ef38b3a7"),
                            BooksId = new Guid("42885498-cda8-44c5-8b65-ddfd04fb435b")
                        },
                        new
                        {
                            AuthorsId = new Guid("d5a43459-9ae3-4b34-9f45-bb516850d9a7"),
                            BooksId = new Guid("5924ddf1-c262-4f86-a588-4eba55e56ac7")
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("8d4bd570-567b-418f-83b3-db5c8c3e584b"),
                            GenresId = new Guid("937288f1-02de-4c21-9ad5-5dc10ab4e5e2")
                        },
                        new
                        {
                            BooksId = new Guid("de9d095f-49ca-411d-8093-4ac8c22d568f"),
                            GenresId = new Guid("54734ffc-e04e-4b2d-ae46-4ca85d339666")
                        },
                        new
                        {
                            BooksId = new Guid("c7b2b1a0-417e-49b8-845e-aee1ecbcbc4d"),
                            GenresId = new Guid("e685d73e-a7e4-4bbd-8677-8a758103bf73")
                        },
                        new
                        {
                            BooksId = new Guid("42885498-cda8-44c5-8b65-ddfd04fb435b"),
                            GenresId = new Guid("e685d73e-a7e4-4bbd-8677-8a758103bf73")
                        },
                        new
                        {
                            BooksId = new Guid("5924ddf1-c262-4f86-a588-4eba55e56ac7"),
                            GenresId = new Guid("ff543c3d-6379-4c82-8b51-e7709e00e017")
                        });
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublishers", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = new Guid("8d4bd570-567b-418f-83b3-db5c8c3e584b"),
                            PublishersId = new Guid("becc55c3-6626-4c57-b7df-812bfa98cee5")
                        },
                        new
                        {
                            BooksId = new Guid("de9d095f-49ca-411d-8093-4ac8c22d568f"),
                            PublishersId = new Guid("dc335b71-c22b-4783-9a0b-94f35aae97d3")
                        },
                        new
                        {
                            BooksId = new Guid("c7b2b1a0-417e-49b8-845e-aee1ecbcbc4d"),
                            PublishersId = new Guid("06d7f2a8-16a6-46f7-af15-6c0d9e9c7a72")
                        },
                        new
                        {
                            BooksId = new Guid("42885498-cda8-44c5-8b65-ddfd04fb435b"),
                            PublishersId = new Guid("97442271-3b8d-4d13-b33b-0cb9a7de91b5")
                        },
                        new
                        {
                            BooksId = new Guid("5924ddf1-c262-4f86-a588-4eba55e56ac7"),
                            PublishersId = new Guid("06d7f2a8-16a6-46f7-af15-6c0d9e9c7a72")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Street")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f04ef82-3e9a-4e11-8d4d-9727479067ec"),
                            City = "Brno",
                            Country = "CZ",
                            PostalCode = " 60200",
                            Street = "Joštová",
                            StreetNumber = 6
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65da7131-03ea-4694-950b-02dbebf19315"),
                            Name = "Kerkeling Hape"
                        },
                        new
                        {
                            Id = new Guid("050d99a9-6760-41ac-93cb-e67c4b798a4c"),
                            Name = "Lars Kepler"
                        },
                        new
                        {
                            Id = new Guid("88f9dc03-8aa7-475f-9d3b-de221768a27d"),
                            Name = "Bram Stoker"
                        },
                        new
                        {
                            Id = new Guid("13394916-877f-4df9-ad6e-9b26ef38b3a7"),
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = new Guid("d5a43459-9ae3-4b34-9f45-bb516850d9a7"),
                            Name = "John Tolkien"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CoverArtPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d4bd570-567b-418f-83b3-db5c8c3e584b"),
                            Abstract = "Co kočky cítí? Znají humor? Na co myslí? Jak mám svou kočku rozmazlovat a komunikovat s ní? A jsou naši pokojoví tygři jasnovidci? Těmto a mnoha dalším zajímavým otázkám se obšírně věnuje laskavá, vtipná i poučná kniha od milovníka koček, který se svými kočičími mazlíčky prožil třináct let a za tu dobu se jim naučil hodně rozumět. Nabízí čtenářům pár užitečných výchovných rad, ale jak sám poznamenává, nakonec budou stejně k ničemu, protože kočky si vždycky změní páníčka k obrazu svému, nikoli naopak.",
                            CoverArtPath = "~/book_covers/kockybookcover.jpg",
                            Isbn = 9788024282442L,
                            Name = "Moje kočky, cizí kočky a já",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("de9d095f-49ca-411d-8093-4ac8c22d568f"),
                            Abstract = "Joona Linna se znovu ocitá v ohrožení života a zachránit ho může jedině Saga Bauerová.",
                            CoverArtPath = "~/book_covers/pavouk.jpg",
                            Isbn = 9788027513765L,
                            Name = "Pavouk",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("c7b2b1a0-417e-49b8-845e-aee1ecbcbc4d"),
                            Abstract = "",
                            CoverArtPath = "~/book_covers/dracula.jpg",
                            Isbn = 9780141199337L,
                            Name = "Dracula",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("42885498-cda8-44c5-8b65-ddfd04fb435b"),
                            Abstract = "peepo",
                            CoverArtPath = "~/book_covers/the-shining.jpg",
                            Isbn = 9788055138343L,
                            Name = "Shining",
                            Rating = 0f
                        },
                        new
                        {
                            Id = new Guid("5924ddf1-c262-4f86-a588-4eba55e56ac7"),
                            Abstract = "Toto je příběh o tom, kterak se Pytlík vydal za dobrodružstvím a shledal, že náhle dělá a říká naprosto neočekávané věci… Bilbo Pytlík je hobit, který se těší z pohodlnéh a skromného života a jen zřídkakdy putuje dále než do své spižírny ve Dně pytle. Jeho spokojené bytí je však narušeno, když se jednoho dne u jeho prahu objeví čaroděj Gandalf v doprovodu třinácti trpaslíků a vezmou ho s sebou na cestu \"tam a zase zpátky\". Mají v úmyslu uloupit poklad mocného Šmaka, velikého a velmi nebezpečného draka... ",
                            CoverArtPath = "~/book_covers/hobbit.jpg",
                            Isbn = 9788025707418L,
                            Name = "Hobbit",
                            Rating = 0f
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookQuantity");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("8d4bd570-567b-418f-83b3-db5c8c3e584b"),
                            LibraryId = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("de9d095f-49ca-411d-8093-4ac8c22d568f"),
                            LibraryId = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            Count = 1,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("c7b2b1a0-417e-49b8-845e-aee1ecbcbc4d"),
                            LibraryId = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("42885498-cda8-44c5-8b65-ddfd04fb435b"),
                            LibraryId = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            Count = 2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            BookId = new Guid("5924ddf1-c262-4f86-a588-4eba55e56ac7"),
                            LibraryId = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            Count = 0,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("937288f1-02de-4c21-9ad5-5dc10ab4e5e2"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("54734ffc-e04e-4b2d-ae46-4ca85d339666"),
                            Name = "Beletry"
                        },
                        new
                        {
                            Id = new Guid("e685d73e-a7e4-4bbd-8677-8a758103bf73"),
                            Name = "Horor"
                        },
                        new
                        {
                            Id = new Guid("ff543c3d-6379-4c82-8b51-e7709e00e017"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("2ffd43f0-443b-4efa-b9f3-06be2b8c4804"),
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("3c3b9369-39fd-4fb2-9671-d80443431e10"),
                            Name = "Comic"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Library");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            AddressId = new Guid("1f04ef82-3e9a-4e11-8d4d-9727479067ec"),
                            Name = "Knihy Dobrovský"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("becc55c3-6626-4c57-b7df-812bfa98cee5"),
                            Name = "EUROMEDIA GROUP, a.s."
                        },
                        new
                        {
                            Id = new Guid("dc335b71-c22b-4783-9a0b-94f35aae97d3"),
                            Name = "Host"
                        },
                        new
                        {
                            Id = new Guid("06d7f2a8-16a6-46f7-af15-6c0d9e9c7a72"),
                            Name = "ARGO"
                        },
                        new
                        {
                            Id = new Guid("97442271-3b8d-4d13-b33b-0cb9a7de91b5"),
                            Name = "Ikar"
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a35621c4-3368-4fc7-81be-bee03e0fc910"),
                            BookId = new Guid("8d4bd570-567b-418f-83b3-db5c8c3e584b"),
                            CustomerId = new Guid("2e258e7f-9aed-456f-915f-f2e6b6441c4f"),
                            DueDate = new DateTime(2022, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            LibraryId = new Guid("32edbd50-8a11-4a78-8630-7a9f6713ea48"),
                            ReservationDate = new DateTime(2022, 10, 1, 18, 40, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("18d38541-b5e9-46bf-9e01-e23820d41c23"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f76cba7e-dc6e-41ec-b08a-f0ad6283ff76",
                            Email = "demo@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "demo",
                            LastName = "demo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO@GMAIL.COM",
                            NormalizedUserName = "DEMO",
                            PasswordHash = "AQAAAAEAACcQAAAAEI56EuIXWNrKlnYOdNxWJx+bnMJ0WWTjpo3Mn3P7HPBGV78AQjb9BJomuebALvEIqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a8678e1-1e82-4804-afd9-dfe676e95909",
                            TwoFactorEnabled = false,
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("11f27436-d044-46ef-9312-2d1929bf8951"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "725bd15d-2ac0-4865-982b-baacce8dc60c",
                            Email = "wmonkman0@zdnet.com",
                            EmailConfirmed = false,
                            FirstName = "Westbrook",
                            LastName = "Monkman",
                            LockoutEnabled = false,
                            PasswordHash = "RLreUYnARxnE",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "monkman"
                        },
                        new
                        {
                            Id = new Guid("2e258e7f-9aed-456f-915f-f2e6b6441c4f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "301fa062-b74a-437e-822b-34d4a591e90a",
                            Email = "mmaxworthy1@ning.com",
                            EmailConfirmed = false,
                            FirstName = "Madelene",
                            LastName = "Maxworthy",
                            LockoutEnabled = false,
                            PasswordHash = "bo09BbrTa",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maxworthy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d93e3e1a-0e04-47cb-8304-cdbc3de237b0"),
                            ConcurrencyStamp = "ccf2a196-e7e5-427c-908f-52899e64793b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("9c47739a-55b7-4720-af7b-723a5a87ab4f"),
                            ConcurrencyStamp = "85a76cd6-68d2-4dc3-95ac-eb5b2977bd6c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.BookQuantity", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("BookQuantities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Reservation", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.Library", "Library")
                        .WithMany("Reservations")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Review", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookReservationSystem.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Role", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("BookReservationSystem.DAL.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Book", b =>
                {
                    b.Navigation("BookQuantities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BookReservationSystem.DAL.Models.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
